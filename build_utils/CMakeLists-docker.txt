cmake_minimum_required(VERSION 3.4)

project(cmakereference)

set(CMAKE_CXX_STANDARD 14 CACHE STRING "C++ version selection")

option(USE_PYBIND "build python bindings" ON)
option(USE_BULLET "link to bullet" ON)
option(USE_OPENCV "link to opencv" OFF)
option(USE_REALSENSE "link to realsense2 driver library" OFF)
option(USE_LIBFRANKA "link to libfranka" OFF)
set(PYBIND11_PYTHON_VERSION 3.7 CACHE STRING "python version")

add_compile_options(
  -O3 -g -w -fPIC -std=c++14 -Wno-terminate
  )

################################################################################

add_definitions(
  -DRAI_ROOT_PATH=\"${CMAKE_SOURCE_DIR}/rai\"
  -DRAI_X11 -DRAI_LAPACK -DRAI_EIGEN -DRAI_PTHREAD
  -DRAI_GL
  -DRAI_GLFW -DRAI_QHULL -DRAI_ASSIMP -DNO_CYCLE_DETECTION -DRAI_PNG -DRAI_PLY
  -DRAI_GJK -DRAI_CCD -DRAI_FCL #-DRAI_SWIFT
  -DRAI_NO_STB_IMPL
  )

################################################################################

include_directories(
  src/
  rai/rai
  /usr/local/include/eigen3
  /usr/include/eigen3
  $ENV{HOME}/opt/include
  )

link_directories(
  $ENV{HOME}/opt/lib
  /usr/lib64/atlas
  )

file(GLOB SRC_GeoGJK rai/rai/Geo/GJK/*.c)
file(GLOB SRC_GeoPly rai/rai/Geo/ply/*.c)
file(GLOB SRC_GeoLewiner rai/rai/Geo/Lewiner/*.cpp)

add_library(rai STATIC
  rai/rai/Core/unity.cxx
  rai/rai/Optim/unity.cxx
  rai/rai/Geo/unity.cxx
  ${SRC_GeoGJK}
  ${SRC_GeoPly}
  ${SRC_GeoLewiner}
  rai/rai/Algo/unity.cxx
  rai/rai/Gui/unity.cxx
  rai/rai/Kin/unity.cxx
  rai/rai/KOMO/unity.cxx
  rai/rai/Logic/unity.cxx
  )

################################################################################

#find_package (FindEigen3 REQUIRED)
#target_link_libraries (rai FindEigen3::Eigen)
#target_link_libraries (rai eigen)

if(USE_BULLET)
  find_package(Bullet REQUIRED)
  add_definitions(-DRAI_BULLET)
  include_directories(${BULLET_INCLUDE_DIRS})
#  target_link_libraries(rai ${BULLET_LIBRARIES})
  message(STATUS "[rai] using bullet libs:" ${BULLET_LIBRARIES})
endif()

if(USE_OPENCV)
  find_package(OpenCV REQUIRED)
  add_definitions(-DRAI_OPENCV)
  target_link_libraries(rai ${OpenCV_LIBS})
endif()

if(USE_REALSENSE)
  add_definitions(-DRAI_REALSENSE)
  target_link_libraries(rai realsense2)
endif()

if(USE_LIBFRANKA)
  add_definitions(-DRAI_FRANKA)
  target_link_libraries(rai franka)
endif()

################################################################################

if(USE_PYBIND)
  set(PYTHON_EXECUTABLE "python${PYBIND11_PYTHON_VERSION}")
  message(STATUS "[rai] using python executable " ${PYTHON_EXECUTABLE} )
  execute_process(
    COMMAND bash "-c" "${PYTHON_EXECUTABLE} -m pybind11 --cmakedir" 
    OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE pybind11_DIR
  )
  message(STATUS "[rai] using pybind11_DIR " ${pybind11_DIR} )
  
  find_package(pybind11)
  add_definitions(-DRAI_PYBIND)

  pybind11_add_module(libry SHARED
    rai/rai/ry/unity.cxx
  )

  target_link_libraries(libry PRIVATE
    rai
    libjsoncpp.a lapack libcblas.a pthread rt X11 libatlas.a
    libassimp.a libglfw3.a libGLEW.a glut GLU GL libpng16.a libzlibstatic.a libqhull.a libccd.a libfcl.a
    #${BULLET_LIBRARIES}
    libBullet2FileLoader.a  libBullet3Common.a    libBullet3Geometry.a     libBulletCollision.a  libBulletInverseDynamics.a
    libBullet3Collision.a   libBullet3Dynamics.a  libBullet3OpenCL_clew.a  libBulletDynamics.a   libBulletSoftBody.a
    libLinearMath.a 
  )
endif()

################################################################################

#add_executable(kinEdit rai/bin/src_kinEdit/main.cpp)
#target_link_libraries(kinEdit rai)

#add_executable(testSim rai/test/Kin/simulation/main.cpp)
#target_link_libraries(testSim rai)


