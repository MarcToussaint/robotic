cmake_minimum_required(VERSION 3.5)

project(RoboticWheel)

## first time call: generate unity sources
if(NOT DEFINED CMAKE_CACHE_MAJOR_VERSION)
  execute_process(COMMAND make -j1 -C ${CMAKE_CURRENT_SOURCE_DIR}/rai unityAll)
endif()

## variable default values
set(CMAKE_CXX_STANDARD 14 CACHE STRING "C++ version selection")
set(PY_VERSION 3.8 CACHE STRING "python version")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "$ENV{HOME}/.local" CACHE PATH "..." FORCE)
endif()
#set(CMAKE_SKIP_BUILD_RPATH  FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH "\$ORIGIN")
#only for testing: python module needs to link to python later!
#set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined")

## options
option(USE_PYBIND "build python bindings" ON)
option(USE_BULLET "link to bullet" ON)
option(USE_PHYSX "link to physx" ON)
option(USE_OPENCV "link to opencv" OFF)
option(USE_REALSENSE "link to realsense2 driver library" OFF)
option(USE_LIBFRANKA "link to libfranka" OFF)
option(USE_PCL "link to pcl library" OFF)

## compile options
add_compile_options(
  -O3 -g -w -fPIC
  $<$<COMPILE_LANGUAGE:CXX>:-std=c++14>
  $<$<COMPILE_LANGUAGE:CXX>:-Wno-terminate>
  )

################################################################################

add_definitions(
  -DRAI_ROOT_PATH=\"${CMAKE_SOURCE_DIR}/rai\"
  -DRAI_X11 -DRAI_LAPACK -DRAI_EIGEN -DRAI_PTHREAD
  -DRAI_GL
  -DRAI_GLFW -DRAI_ANN -DRAI_QHULL8 -DRAI_ASSIMP -DNO_CYCLE_DETECTION -DRAI_PNG -DRAI_PLY -DRAI_H5
  -DRAI_GJK -DRAI_CCD -DRAI_FCL -DRAI_Lewiner
  -DRAI_NO_STB_IMPL
  -DRAI_BotOp
  )

################################################################################

include_directories(
  rai/src
  botop/src
  /usr/local/include/eigen3
  /usr/include/eigen3
  $ENV{HOME}/.local/include
  )

link_directories(
  /usr/lib64/atlas
  $ENV{HOME}/.local/lib
  )

if(USE_PHYSX)
  link_directories(/usr/local/bin/linux.clang/release)
endif()

file(GLOB SRC_GeoGJK rai/src/Geo/GJK/*.c)
file(GLOB SRC_GeoPly rai/src/Geo/ply/*.c)
file(GLOB SRC_GeoCcd rai/src/Geo/ccd_rai/*.c)
file(GLOB SRC_GeoLewiner rai/src/Geo/Lewiner/*.cpp)

file(GLOB SRC_BotOp botop/src/BotOp/*.cpp)
file(GLOB SRC_Franka botop/src/Franka/*.cpp)
file(GLOB SRC_Omnibase botop/src/Omnibase/*.cpp)
file(GLOB SRC_OptiTrack botop/src/OptiTrack/*.cpp)
file(GLOB SRC_RealSense botop/src/RealSense/*.cpp)
file(GLOB SRC_Robotiq botop/src/Robotiq/*.cpp)
file(GLOB SRC_Audio botop/src/Audio/*.cpp)

add_library(rai SHARED
  rai/src/Core/unity.cxx
  rai/src/Optim/unity.cxx
  rai/src/Geo/unity.cxx
  ${SRC_GeoGJK}
  ${SRC_GeoPly}
  ${SRC_GeoCcd}
  ${SRC_GeoLewiner}
  rai/src/Algo/unity.cxx
  rai/src/Search/unity.cxx
  rai/src/PathAlgos/unity.cxx
  rai/src/Gui/unity.cxx
  rai/src/Kin/unity.cxx
  rai/src/KOMO/unity.cxx
  rai/src/Logic/unity.cxx
  rai/src/Control/unity.cxx
  ${SRC_BotOp}
  ${SRC_Franka}
  ${SRC_Omnibase}
  ${SRC_OptiTrack}
  ${SRC_RealSense}
  ${SRC_Robotiq}
  ${SRC_Audio}
  )

target_link_libraries(rai PRIVATE
    # ORDER MATTERS! test with -no-undefined linker flag (above)
    libjsoncpp.a lapack pthread rt X11 libatlas.a
    libassimp.a libglfw3.a libGLEW.a glut GLU GL libpng16.a libzlibstatic.a libqhull.a libANN.a libccd.a libfcl.a
    libhdf5_cpp.a libhdf5.a
    #${BULLET_LIBRARIES}
    libBullet2FileLoader.a  libBullet3Common.a    libBullet3Geometry.a     libBulletCollision.a  libBulletInverseDynamics.a
    libBullet3Collision.a   libBullet3Dynamics.a  libBullet3OpenCL_clew.a  libBulletDynamics.a   libBulletSoftBody.a
    libLinearMath.a
    dl
  )

################################################################################
#
# include external libraries

#find_package (FindEigen3 REQUIRED)
#target_link_libraries (rai FindEigen3::Eigen)
#target_link_libraries (rai eigen)

if(USE_BULLET)
  find_package(Bullet REQUIRED)
  add_definitions(-DRAI_BULLET)
  include_directories(${BULLET_INCLUDE_DIRS})
  target_link_libraries(rai PRIVATE ${BULLET_LIBRARIES})
  message(STATUS "[rai] using bullet libs:" ${BULLET_LIBRARIES})
endif()

if(USE_PHYSX)
  add_definitions(-DRAI_PHYSX -DNDEBUG -DPX_DISABLE_FLUIDS -DCORELIB -DPX32 -DLINUX)
  target_link_libraries(rai PRIVATE libPhysXExtensions_static_64.a PhysX_static_64 PhysXCooking_static_64 PhysXCommon_static_64 PhysXFoundation_static_64)
  message(STATUS "[rai] using physx libs from /usr/local")
endif()

if(USE_OPENCV)
  find_package(OpenCV REQUIRED)
  add_definitions(-DRAI_OPENCV)
  target_link_libraries(rai PRIVATE ${OpenCV_LIBS})
  message(STATUS "[rai] using OpenCV libs:" ${OpenCV_LIBS})
endif()

if(USE_REALSENSE)
  add_definitions(-DRAI_REALSENSE)
  target_link_libraries(rai PRIVATE realsense2 realsense-file fw usb-1.0) #rsutils
  message(STATUS "[rai] using realsense libs")
endif()

if(USE_LIBFRANKA)
  add_definitions(-DRAI_FRANKA)
  target_link_libraries(rai PRIVATE franka PocoNet PocoFoundation)
  message(STATUS "[rai] using libfranka")
endif()

################################################################################

if(USE_PYBIND)
  set(PYTHON_EXECUTABLE "python${PY_VERSION}")
  message(STATUS "[rai] using python executable " ${PYTHON_EXECUTABLE} )
  execute_process(
    COMMAND bash "-c" "${PYTHON_EXECUTABLE} -m pybind11 --cmakedir" 
    OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE pybind11_DIR
  )
  message(STATUS "[rai] using pybind11_DIR " ${pybind11_DIR} )
  
  find_package(pybind11)
  add_definitions(-DRAI_PYBIND)

  pybind11_add_module(_robotic SHARED
    rai/src/ry/unity.cxx
    botop/src/BotOp/py-BotOp.cxx
  )

  target_link_libraries(_robotic PRIVATE
    rai
  )
endif()

################################################################################
#
# verbosity: info on eventual compiler flags

get_property(_defs DIRECTORY PROPERTY COMPILE_DEFINITIONS)
message(STATUS "[rai] compiler flags: " "${_defs}")

################################################################################
