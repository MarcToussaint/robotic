{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "94bf0959",
   "metadata": {},
   "source": [
    "# Manipulation Modelling & Execution\n",
    "\n",
    "The discussed components (KOMO, BotOp, NLP_Solver, RRT) provide basic ingredients for manipulation planning and execution. This tutorial is about how to practically use these in typical manipulation settings.\n",
    "\n",
    "The first focus is on *manipulation modelling*. While KOMO provides a very powerful abstract framework to define all kinds of constraints, here we discuss what are concrete useful constraints for typical actions, e.g., picking and placing a box, or capsule. The *ManipulationModelling* class is meant to translate between typical actions and the abstract KOMO specification of the corresponding constraints.\n",
    "\n",
    "The second focus is on the whole pipeline. We follow a basic sense-plan-act pipeline (not yet a fully integrated reactive framework such as SecMPC). To be more detailed, we assume the following basic steps in each loop:\n",
    "* Perception: Update the configuration model to be in sync with the real world - using perception.\n",
    "* Discrete decisions (task planning): Decide on discrete next actions, such as which object to pick or place next.\n",
    "* Waypoint planning: Model the manipulation constraints for the next few actions and solve them to get a plan for the next few waypoints.\n",
    "* Path planning: Create a fine-grained path/trajectory between waypoints, sometimes justing quick interpolation & optimization, sometimes using full fledge path finding (bi-directional RRT).\n",
    "* Execution: Sending the path to BotOp for running it on the real system.\n",
    "\n",
    "We neglect perception and discrete decision making here."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa8bba6a",
   "metadata": {},
   "source": [
    "## Manipulation Modelling\n",
    "\n",
    "We start with discussing manipulation modelling for standard box/cylinder grasping and placing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a13d9bd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import robotic as ry\n",
    "import numpy as np\n",
    "import random\n",
    "import time\n",
    "\n",
    "# this import the local manipulation.py .. to be integrated in robotic..\n",
    "import manipulation as manip"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b913c478",
   "metadata": {},
   "source": [
    "A basic configuration with a box and cylinder:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "caf624e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C = ry.Config()\n",
    "C.addFile(ry.raiPath('scenarios/pandaSingle.g'))\n",
    "\n",
    "C.addFrame('box') \\\n",
    "    .setPosition([-.25,.1,1.]) \\\n",
    "    .setShape(ry.ST.ssBox, size=[.06,.06,.06,.005]) \\\n",
    "    .setColor([1,.5,0]) \\\n",
    "    .setContact(1)\n",
    "\n",
    "C.addFrame(\"capsule\") \\\n",
    "    .setShape(ry.ST.capsule, [.2,.02]) \\\n",
    "    .setPosition([.25,.1,1.]) \\\n",
    "    .setColor([1,.5,0]) \\\n",
    "    .setContact(1)\n",
    "\n",
    "# for convenience, a few definitions:\n",
    "qHome = C.getJointState()\n",
    "gripper = \"l_gripper\";\n",
    "palm = \"l_palm\";\n",
    "box = \"box\";\n",
    "table = \"table\";\n",
    "boxSize = C.frame(box).getSize()\n",
    "\n",
    "C.view()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7f564ac",
   "metadata": {},
   "source": [
    "Look into the definition of *ManipulationModelling* class! You see that this class provides wrapper methods to setup a komo problem. The following demonstrate the methods provided to model box and cylinder grasping IK problems:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ab84a9b",
   "metadata": {},
   "source": [
    "### Box centered top grasp\n",
    "There are 6 possible orientation of an orthonormal centered box grasp. Have a look at the `grasp_top_box` method!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e16fa08c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  -- feasible:\n",
      "     { time: 0.007351, evals: 31, done: 1, feasible: 1, sos: 0.122942, f: 0, ineq: 0, eq: 0.0825873 }\n",
      "  -- feasible:\n",
      "     { time: 0.005137, evals: 18, done: 1, feasible: 1, sos: 0.0350933, f: 0, ineq: 0, eq: 0.00541384 }\n",
      "  -- feasible:\n",
      "     { time: 0.003924, evals: 22, done: 1, feasible: 1, sos: 0.049789, f: 0, ineq: 0, eq: 0.00541364 }\n",
      "  -- feasible:\n",
      "     { time: 0.002952, evals: 12, done: 1, feasible: 1, sos: 0.00551676, f: 0, ineq: 0, eq: 0.00541987 }\n",
      "  -- feasible:\n",
      "     { time: 0.008808, evals: 15, done: 1, feasible: 1, sos: 0.0411845, f: 0, ineq: 0, eq: 0.00541402 }\n",
      "  -- feasible:\n",
      "     { time: 0.008384, evals: 14, done: 1, feasible: 1, sos: 0.0288624, f: 0, ineq: 0, eq: 0.00538471 }\n"
     ]
    }
   ],
   "source": [
    "C.setJointState(qHome)\n",
    "for orientation in ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']: #loops over the 6 possible grasps\n",
    "    # setup the manipulation problem\n",
    "    man = manip.ManipulationModelling(C)\n",
    "    man.setup_inverse_kinematics()\n",
    "    man.grasp_top_box(1., gripper, box, orientation)\n",
    "    \n",
    "    # solve it\n",
    "    pose = man.solve()\n",
    "    \n",
    "    # check feasibility and display\n",
    "    if man.ret.feasible:\n",
    "        C.setJointState(pose[0])\n",
    "        C.view(True, f'grasp_top_box with orientation {orientation}\\nret: {man.ret}')\n",
    "    else:\n",
    "        print(' -- infeasible')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b73a260d",
   "metadata": {},
   "source": [
    "### Box general grasp\n",
    "We do not have to grasp a box in the center or orthonormally. We can only specify along which axis the fingers should press, and that they need to be inside a margin of the box sides.  Have a look at the `grasp_box` method! To illustrate the gained degrees of freedom, we also impose a random bias (leading to different solutions in nullspace):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dd066bb7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  -- feasible:\n",
      "     { time: 0.016832, evals: 38, done: 1, feasible: 1, sos: 10.2436, f: 0, ineq: 0, eq: 1.36694e-06 }\n",
      "  -- infeasible:\n",
      "     { time: 0.060324, evals: 200, done: 1, feasible: 0, sos: 17.795, f: 0, ineq: 1.76137, eq: 1.48238 }\n",
      "-- infeasible 1 x\n",
      "  -- feasible:\n",
      "     { time: 0.00822, evals: 46, done: 1, feasible: 1, sos: 7.39154, f: 0, ineq: 4.5817e-07, eq: 2.41972e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.045744, evals: 96, done: 1, feasible: 1, sos: 5.69964, f: 0, ineq: 1.66871e-06, eq: 1.38107e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.034473, evals: 60, done: 1, feasible: 1, sos: 13.588, f: 0, ineq: 3.90714e-07, eq: 9.23431e-07 }\n",
      "  -- feasible:\n",
      "     { time: 0.040545, evals: 77, done: 1, feasible: 1, sos: 5.08785, f: 0, ineq: 6.61688e-07, eq: 2.87141e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.020119, evals: 27, done: 1, feasible: 1, sos: 1.52728, f: 0, ineq: 0, eq: 1.07026e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.031536, evals: 47, done: 1, feasible: 1, sos: 3.35426, f: 0, ineq: 1.0469e-07, eq: 1.1079e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.048899, evals: 124, done: 1, feasible: 1, sos: 16.2489, f: 0, ineq: 0, eq: 0.000528224 }\n",
      "  -- feasible:\n",
      "     { time: 0.072174, evals: 200, done: 1, feasible: 1, sos: 9.92512, f: 0, ineq: 0.0642378, eq: 0.358702 }\n",
      "  -- feasible:\n",
      "     { time: 0.041905, evals: 110, done: 1, feasible: 1, sos: 8.63044, f: 0, ineq: 0.000498187, eq: 0.000661577 }\n",
      "  -- feasible:\n",
      "     { time: 0.020267, evals: 56, done: 1, feasible: 1, sos: 5.11006, f: 0, ineq: 2.19203e-06, eq: 7.44497e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.004897, evals: 23, done: 1, feasible: 1, sos: 9.5093, f: 0, ineq: 0.00029863, eq: 0.00781389 }\n",
      "  -- feasible:\n",
      "     { time: 0.02279, evals: 32, done: 1, feasible: 1, sos: 3.74977, f: 0, ineq: 4.20851e-06, eq: 3.0699e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.037786, evals: 71, done: 1, feasible: 1, sos: 8.14102, f: 0, ineq: 0.000985741, eq: 0.000558182 }\n",
      "  -- feasible:\n",
      "     { time: 0.037803, evals: 68, done: 1, feasible: 1, sos: 4.65007, f: 0, ineq: 1.08371e-07, eq: 4.63823e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.021394, evals: 29, done: 1, feasible: 1, sos: 7.10678, f: 0, ineq: 0, eq: 2.28202e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.030422, evals: 42, done: 1, feasible: 1, sos: 3.28606, f: 0, ineq: 0, eq: 4.60881e-05 }\n",
      "  -- infeasible:\n",
      "     { time: 0.070602, evals: 200, done: 1, feasible: 0, sos: 14.7366, f: 0, ineq: 0.00155642, eq: 0.639063 }\n",
      "-- infeasible 8 y\n",
      "  -- infeasible:\n",
      "     { time: 0.036674, evals: 200, done: 1, feasible: 0, sos: 9.73452, f: 0, ineq: 1.31998, eq: 1.64185 }\n",
      "-- infeasible 9 y\n",
      "  -- feasible:\n",
      "     { time: 0.013888, evals: 65, done: 1, feasible: 1, sos: 2.30968, f: 0, ineq: 0, eq: 0.000135184 }\n",
      "  -- feasible:\n",
      "     { time: 0.032567, evals: 52, done: 1, feasible: 1, sos: 2.81618, f: 0, ineq: 0, eq: 1.01633e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.047561, evals: 105, done: 1, feasible: 1, sos: 8.39983, f: 0, ineq: 0.000232726, eq: 0.000734488 }\n",
      "  -- feasible:\n",
      "     { time: 0.017554, evals: 54, done: 1, feasible: 1, sos: 2.34856, f: 0, ineq: 5.97263e-08, eq: 1.11892e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.048999, evals: 105, done: 1, feasible: 1, sos: 8.46532, f: 0, ineq: 0, eq: 7.22241e-05 }\n",
      "  -- infeasible:\n",
      "     { time: 0.064202, evals: 200, done: 1, feasible: 0, sos: 10.3008, f: 0, ineq: 2.51594, eq: 0.251564 }\n",
      "-- infeasible 5 z\n",
      "  -- feasible:\n",
      "     { time: 0.028949, evals: 149, done: 1, feasible: 1, sos: 11.3383, f: 0, ineq: 0, eq: 0.000520856 }\n",
      "  -- feasible:\n",
      "     { time: 0.055789, evals: 107, done: 1, feasible: 1, sos: 7.97929, f: 0, ineq: 3.81294e-05, eq: 0.000640749 }\n",
      "  -- infeasible:\n",
      "     { time: 0.037874, evals: 200, done: 1, feasible: 0, sos: 9.90337, f: 0, ineq: 2.5141, eq: 0.261235 }\n",
      "-- infeasible 8 z\n",
      "  -- feasible:\n",
      "     { time: 0.01256, evals: 61, done: 1, feasible: 1, sos: 4.16635, f: 0, ineq: 5.96376e-07, eq: 2.79557e-06 }\n"
     ]
    }
   ],
   "source": [
    "C.setJointState(qHome)\n",
    "limits = C.getJointLimits()\n",
    "for orientation in ['x', 'y', 'z']:\n",
    "    for i in range(10):\n",
    "        # setup the manipulation problem\n",
    "        man = manip.ManipulationModelling(C)\n",
    "        man.setup_inverse_kinematics()\n",
    "        # ... with random bias in joint space\n",
    "        qBias = limits[0]+np.random.uniform(qHome.shape)%(limits[1]-limits[0])\n",
    "        man.bias(1., qBias, 1e0)\n",
    "        # ... and general, non-centered box grasping\n",
    "        man.grasp_box(1., gripper, box, palm, orientation, margin=.02)\n",
    "        \n",
    "        # solve\n",
    "        pose = man.solve()\n",
    "        \n",
    "        # if feasible, display\n",
    "        if man.ret.feasible:\n",
    "            C.setJointState(pose[0])\n",
    "            C.view(True, f'grasp_box with orientation {orientation}\\nret: {man.ret}')\n",
    "        else:\n",
    "            print('-- infeasible', i, orientation)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b4bc84d",
   "metadata": {},
   "source": [
    "### Cylinder grasp\n",
    "\n",
    "A cylinder (or capsule) can be grasped by ensuring the finger axis is normal to the cylinder's axis -- have a look at the `grasp_cylinder` method. Again, a demo with random bias to show the variety of grasps modelled that way:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "301f497d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  -- feasible:\n",
      "     { time: 0.016534, evals: 27, done: 1, feasible: 1, sos: 6.0888, f: 0, ineq: 1.34766e-07, eq: 9.48972e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.018499, evals: 27, done: 1, feasible: 1, sos: 3.46608, f: 0, ineq: 0, eq: 5.53631e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.070199, evals: 200, done: 1, feasible: 1, sos: 2.83418, f: 0, ineq: 0.0123684, eq: 0.0393855 }\n",
      "  -- feasible:\n",
      "     { time: 0.018187, evals: 28, done: 1, feasible: 1, sos: 4.09662, f: 0, ineq: 0, eq: 1.79128e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.020248, evals: 33, done: 1, feasible: 1, sos: 4.5777, f: 0, ineq: 0, eq: 1.52641e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.035516, evals: 66, done: 1, feasible: 1, sos: 8.85589, f: 0, ineq: 0.000281236, eq: 0.000819788 }\n",
      "  -- feasible:\n",
      "     { time: 0.04525, evals: 92, done: 1, feasible: 1, sos: 8.87454, f: 0, ineq: 0, eq: 4.37712e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.028615, evals: 45, done: 1, feasible: 1, sos: 3.91301, f: 0, ineq: 2.27432e-07, eq: 9.41856e-07 }\n",
      "  -- feasible:\n",
      "     { time: 0.027809, evals: 43, done: 1, feasible: 1, sos: 4.92343, f: 0, ineq: 1.47441e-07, eq: 2.60924e-07 }\n",
      "  -- feasible:\n",
      "     { time: 0.024207, evals: 37, done: 1, feasible: 1, sos: 4.32503, f: 0, ineq: 0, eq: 1.00785e-06 }\n"
     ]
    }
   ],
   "source": [
    "C.setJointState(qHome)\n",
    "limits = C.getJointLimits()\n",
    "for i in range(10):\n",
    "    # setup the manipulation problem\n",
    "    man = manip.ManipulationModelling(C)\n",
    "    man.setup_inverse_kinematics()\n",
    "    qBias = limits[0]+np.random.uniform(qHome.shape)%(limits[1]-limits[0])\n",
    "    man.bias(1., qBias, 1e0)\n",
    "    man.grasp_cylinder(1., gripper, 'capsule', palm)\n",
    "    \n",
    "    # solve\n",
    "    pose = man.solve()\n",
    "    \n",
    "    # if feasible, display\n",
    "    if man.ret.feasible:\n",
    "        C.setJointState(pose[0])\n",
    "        C.view(True, f'grasp_cylinder\\nret: {man.ret}')\n",
    "    else:\n",
    "        print('-- infeasible', i, orientation)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61b864f4",
   "metadata": {},
   "source": [
    "## Sequential Manipulation Modelling\n",
    "\n",
    "Sequential manipulation modelling is special, as in some phases the manipulated objects move with the manipulator. Internally, komo models this with a *mode switch* (where an object becomes attached to the manipulator with a stable (but optimizable) relative transform).\n",
    "\n",
    "Using the ManipulationModelling class, the `setup_pick_and_place_waypoints` method creates a two-time-steps komo problem where the relative object-gripper position is constrained to be the same in the 1st and 2st step (as it is parameterized by a shared relative kinematic joint). The `grasp_box` method ensures that the solution *also* fulfils grasp constraints in the first time step; and the `place_box` method ensures that the solution *also* fulfils placement constraints in the second time step. The additional `target_relative_xy_position` is optional, so see placement to explicit xy-positions on the table. Have a look at the definitions of all these methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cbf6f327",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== pnp 0, grasp orientation x, place orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.056019, evals: 78, done: 1, feasible: 1, sos: 0.0465127, f: 0, ineq: 8.03132e-05, eq: 0.000266558 }\n",
      "=== pnp 1, grasp orientation x, place orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.043655, evals: 51, done: 1, feasible: 1, sos: 0.0374269, f: 0, ineq: 0, eq: 6.86693e-05 }\n",
      "=== pnp 2, grasp orientation y, place orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.053191, evals: 39, done: 1, feasible: 1, sos: 0.0203362, f: 0, ineq: 6.85762e-08, eq: 4.00304e-06 }\n",
      "=== pnp 3, grasp orientation y, place orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.040276, evals: 33, done: 1, feasible: 1, sos: 0.0203614, f: 0, ineq: 2.83018e-08, eq: 4.66688e-06 }\n",
      "=== pnp 4, grasp orientation y, place orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.048659, evals: 39, done: 1, feasible: 1, sos: 0.0197946, f: 0, ineq: 1.11193e-08, eq: 7.66498e-06 }\n",
      "=== pnp 5, grasp orientation y, place orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.055594, evals: 47, done: 1, feasible: 1, sos: 0.0231314, f: 0, ineq: 7.66455e-09, eq: 1.94808e-06 }\n",
      "=== pnp 6, grasp orientation y, place orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.075731, evals: 95, done: 1, feasible: 1, sos: 0.0214115, f: 0, ineq: 2.93529e-05, eq: 0.000592619 }\n",
      "=== pnp 7, grasp orientation x, place orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.056944, evals: 49, done: 1, feasible: 1, sos: 0.029159, f: 0, ineq: 0, eq: 8.76677e-06 }\n",
      "=== pnp 8, grasp orientation z, place orientation z\n",
      "  -- infeasible:\n",
      "     { time: 0.166025, evals: 201, done: 1, feasible: 0, sos: 0.105964, f: 0, ineq: 0.207351, eq: 1.34742 }\n",
      " -- infeasible\n",
      "=== pnp 9, grasp orientation z, place orientation z\n",
      "  -- infeasible:\n",
      "     { time: 0.140124, evals: 200, done: 1, feasible: 0, sos: 0.107989, f: 0, ineq: 0.205016, eq: 1.38301 }\n",
      " -- infeasible\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C.setJointState(qHome)\n",
    "\n",
    "for i in range(10):\n",
    "    grasp_ori = random.choice(['x', 'y', 'z'])\n",
    "    place_ori = 'z' #random.choice(['x', 'y', 'z'])\n",
    "    info = f'pnp {i}, grasp orientation {grasp_ori}, place orientation {place_ori}'\n",
    "    print('===', info)\n",
    "    \n",
    "    # setup manipulation problem\n",
    "    man = manip.ManipulationModelling(C)\n",
    "    man.setup_pick_and_place_waypoints(gripper, box)\n",
    "    man.grasp_box(1., gripper, box, palm, grasp_ori)\n",
    "    man.place_box(2., box, table, palm, place_ori)\n",
    "    man.target_relative_xy_position(2., box, table, [(i%5)*.1-.2, .2])\n",
    "    \n",
    "    # solve\n",
    "    q = man.solve()\n",
    "\n",
    "    # if feasible, display (including 'fake' simulation with kinematic attach)\n",
    "    if man.ret.feasible:\n",
    "        C.setJointState(q[0])\n",
    "        C.view(True, f'{info}\\nwaypoint 0\\nret: {man.ret}')\n",
    "        C.attach(gripper, box)\n",
    "        C.setJointState(q[1])\n",
    "        C.view(True, f'{info}\\nwaypoint 1\\nret: {man.ret}')\n",
    "        C.attach(table, box)\n",
    "        C.setJointState(qHome)\n",
    "        C.view(True, 'back home')\n",
    "    else:\n",
    "        print(' -- infeasible')\n",
    "\n",
    "del man\n",
    "C.frame('box').setPosition([-.25,.1,1.])\n",
    "C.view()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c96d8a9",
   "metadata": {},
   "source": [
    "## Path generation\n",
    "\n",
    "Once solutions to the manipulation keyframes/waypoints are available, the next step is to generate motion between them. We can use sample-based path finding (bi-directional RRT) and/or smooth motion optimization for this."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36c75c59",
   "metadata": {},
   "source": [
    "### Smooth point-to-point motion\n",
    "The following demonstrates smooth point-to-point motion between box grasps, there the motion is additionally constrains the endeffector to retract and approach:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5a241da0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== 0 orientation x\n",
      "  -- feasible:\n",
      "     { time: 0.009587, evals: 47, done: 1, feasible: 1, sos: 0.00660563, f: 0, ineq: 0, eq: 8.15443e-05 }\n",
      "    IK: { time: 0.009587, evals: 47, done: 1, feasible: 1, sos: 0.00660563, f: 0, ineq: 0, eq: 8.15443e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.024081, evals: 23, done: 1, feasible: 1, sos: 0.623779, f: 0, ineq: 9.9589e-07, eq: 0.000239841 }\n",
      "  path: { time: 0.024081, evals: 23, done: 1, feasible: 1, sos: 0.623779, f: 0, ineq: 9.9589e-07, eq: 0.000239841 }\n",
      "=== 1 orientation y\n",
      "  -- feasible:\n",
      "     { time: 0.010579, evals: 17, done: 1, feasible: 1, sos: 0.014367, f: 0, ineq: 1.93036e-08, eq: 2.68454e-07 }\n",
      "    IK: { time: 0.010579, evals: 17, done: 1, feasible: 1, sos: 0.014367, f: 0, ineq: 1.93036e-08, eq: 2.68454e-07 }\n",
      "  -- feasible:\n",
      "     { time: 0.018297, evals: 13, done: 1, feasible: 1, sos: 1.00251, f: 0, ineq: 1.16679e-06, eq: 0.000161073 }\n",
      "  path: { time: 0.018297, evals: 13, done: 1, feasible: 1, sos: 1.00251, f: 0, ineq: 1.16679e-06, eq: 0.000161073 }\n",
      "=== 2 orientation x\n",
      "  -- feasible:\n",
      "     { time: 0.010473, evals: 31, done: 1, feasible: 1, sos: 0.00660547, f: 0, ineq: 3.27899e-06, eq: 4.12547e-05 }\n",
      "    IK: { time: 0.010473, evals: 31, done: 1, feasible: 1, sos: 0.00660547, f: 0, ineq: 3.27899e-06, eq: 4.12547e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.02511, evals: 21, done: 1, feasible: 1, sos: 1.00923, f: 0, ineq: 1.05243e-06, eq: 0.000297107 }\n",
      "  path: { time: 0.02511, evals: 21, done: 1, feasible: 1, sos: 1.00923, f: 0, ineq: 1.05243e-06, eq: 0.000297107 }\n",
      "=== 3 orientation x\n",
      "  -- feasible:\n",
      "     { time: 0.020762, evals: 28, done: 1, feasible: 1, sos: 0.00660567, f: 0, ineq: 0, eq: 7.40294e-05 }\n",
      "    IK: { time: 0.020762, evals: 28, done: 1, feasible: 1, sos: 0.00660567, f: 0, ineq: 0, eq: 7.40294e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.019717, evals: 13, done: 1, feasible: 1, sos: 0.412833, f: 0, ineq: 1.21414e-06, eq: 0.000308312 }\n",
      "  path: { time: 0.019717, evals: 13, done: 1, feasible: 1, sos: 0.412833, f: 0, ineq: 1.21414e-06, eq: 0.000308312 }\n",
      "=== 4 orientation y\n",
      "  -- feasible:\n",
      "     { time: 0.034262, evals: 48, done: 1, feasible: 1, sos: 0.0442215, f: 0, ineq: 1.6792e-08, eq: 1.10646e-06 }\n",
      "    IK: { time: 0.034262, evals: 48, done: 1, feasible: 1, sos: 0.0442215, f: 0, ineq: 1.6792e-08, eq: 1.10646e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.020417, evals: 17, done: 1, feasible: 1, sos: 1.3416, f: 0, ineq: 1.29642e-06, eq: 0.000106467 }\n",
      "  path: { time: 0.020417, evals: 17, done: 1, feasible: 1, sos: 1.3416, f: 0, ineq: 1.29642e-06, eq: 0.000106467 }\n",
      "=== 5 orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.065972, evals: 167, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29092e-05, eq: 1.17138e-05 }\n",
      "    IK: { time: 0.065972, evals: 167, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29092e-05, eq: 1.17138e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.0217, evals: 21, done: 1, feasible: 1, sos: 1.75788, f: 0, ineq: 1.48158e-06, eq: 0.000483376 }\n",
      "  path: { time: 0.0217, evals: 21, done: 1, feasible: 1, sos: 1.75788, f: 0, ineq: 1.48158e-06, eq: 0.000483376 }\n",
      "=== 6 orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.061862, evals: 134, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29171e-05, eq: 1.17159e-05 }\n",
      "    IK: { time: 0.061862, evals: 134, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29171e-05, eq: 1.17159e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.015547, evals: 14, done: 1, feasible: 1, sos: 0.491485, f: 0, ineq: 1.35716e-06, eq: 0.000352124 }\n",
      "  path: { time: 0.015547, evals: 14, done: 1, feasible: 1, sos: 0.491485, f: 0, ineq: 1.35716e-06, eq: 0.000352124 }\n",
      "=== 7 orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.071546, evals: 149, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29126e-05, eq: 1.17146e-05 }\n",
      "    IK: { time: 0.071546, evals: 149, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29126e-05, eq: 1.17146e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.015206, evals: 14, done: 1, feasible: 1, sos: 0.491484, f: 0, ineq: 1.35715e-06, eq: 0.000352115 }\n",
      "  path: { time: 0.015206, evals: 14, done: 1, feasible: 1, sos: 0.491484, f: 0, ineq: 1.35715e-06, eq: 0.000352115 }\n",
      "=== 8 orientation y\n",
      "  -- feasible:\n",
      "     { time: 0.035563, evals: 46, done: 1, feasible: 1, sos: 0.0442215, f: 0, ineq: 1.61143e-08, eq: 1.11703e-06 }\n",
      "    IK: { time: 0.035563, evals: 46, done: 1, feasible: 1, sos: 0.0442215, f: 0, ineq: 1.61143e-08, eq: 1.11703e-06 }\n",
      "  -- feasible:\n",
      "     { time: 0.021274, evals: 18, done: 1, feasible: 1, sos: 1.72313, f: 0, ineq: 1.0122e-06, eq: 6.81117e-05 }\n",
      "  path: { time: 0.021274, evals: 18, done: 1, feasible: 1, sos: 1.72313, f: 0, ineq: 1.0122e-06, eq: 6.81117e-05 }\n",
      "=== 9 orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.068819, evals: 167, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29164e-05, eq: 1.17188e-05 }\n",
      "    IK: { time: 0.068819, evals: 167, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29164e-05, eq: 1.17188e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.02211, evals: 21, done: 1, feasible: 1, sos: 1.75789, f: 0, ineq: 1.48166e-06, eq: 0.000483395 }\n",
      "  path: { time: 0.02211, evals: 21, done: 1, feasible: 1, sos: 1.75789, f: 0, ineq: 1.48166e-06, eq: 0.000483395 }\n",
      "=== 10 orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.033339, evals: 127, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29147e-05, eq: 1.17184e-05 }\n",
      "    IK: { time: 0.033339, evals: 127, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29147e-05, eq: 1.17184e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.015436, evals: 14, done: 1, feasible: 1, sos: 0.491484, f: 0, ineq: 1.35715e-06, eq: 0.000352116 }\n",
      "  path: { time: 0.015436, evals: 14, done: 1, feasible: 1, sos: 0.491484, f: 0, ineq: 1.35715e-06, eq: 0.000352116 }\n",
      "=== 11 orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.049472, evals: 131, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29173e-05, eq: 1.1716e-05 }\n",
      "    IK: { time: 0.049472, evals: 131, done: 1, feasible: 1, sos: 0.0394672, f: 0, ineq: 1.29173e-05, eq: 1.1716e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.015682, evals: 14, done: 1, feasible: 1, sos: 0.491485, f: 0, ineq: 1.35716e-06, eq: 0.000352123 }\n",
      "  path: { time: 0.015682, evals: 14, done: 1, feasible: 1, sos: 0.491485, f: 0, ineq: 1.35716e-06, eq: 0.000352123 }\n",
      "=== 12 orientation y\n",
      "  -- feasible:\n",
      "     { time: 0.04359, evals: 49, done: 1, feasible: 1, sos: 0.0442204, f: 0, ineq: 0, eq: 4.04733e-05 }\n",
      "    IK: { time: 0.04359, evals: 49, done: 1, feasible: 1, sos: 0.0442204, f: 0, ineq: 0, eq: 4.04733e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.021832, evals: 19, done: 1, feasible: 1, sos: 1.7231, f: 0, ineq: 1.01158e-06, eq: 6.80989e-05 }\n",
      "  path: { time: 0.021832, evals: 19, done: 1, feasible: 1, sos: 1.7231, f: 0, ineq: 1.01158e-06, eq: 6.80989e-05 }\n",
      "=== 13 orientation x\n",
      "  -- feasible:\n",
      "     { time: 0.038928, evals: 27, done: 1, feasible: 1, sos: 0.00660551, f: 0, ineq: 0, eq: 6.82654e-05 }\n",
      "    IK: { time: 0.038928, evals: 27, done: 1, feasible: 1, sos: 0.00660551, f: 0, ineq: 0, eq: 6.82654e-05 }\n",
      "  -- feasible:\n",
      "     { time: 0.028966, evals: 24, done: 1, feasible: 1, sos: 1.34029, f: 0, ineq: 8.166e-07, eq: 0.000219167 }\n",
      "  path: { time: 0.028966, evals: 24, done: 1, feasible: 1, sos: 1.34029, f: 0, ineq: 8.166e-07, eq: 0.000219167 }\n",
      "=== 14 orientation z\n",
      "  -- feasible:\n",
      "     { time: 0.050743, evals: 100, done: 1, feasible: 1, sos: 0.0547017, f: 0, ineq: 4.29568e-05, eq: 0.000114869 }\n",
      "    IK: { time: 0.050743, evals: 100, done: 1, feasible: 1, sos: 0.0547017, f: 0, ineq: 4.29568e-05, eq: 0.000114869 }\n",
      "  -- feasible:\n",
      "     { time: 0.017395, evals: 15, done: 1, feasible: 1, sos: 2.00432, f: 0, ineq: 9.66668e-07, eq: 0.000937879 }\n",
      "  path: { time: 0.017395, evals: 15, done: 1, feasible: 1, sos: 2.00432, f: 0, ineq: 9.66668e-07, eq: 0.000937879 }\n",
      "=== 15 orientation x\n",
      "  -- feasible:\n",
      "     { time: 0.039798, evals: 50, done: 1, feasible: 1, sos: 0.0538499, f: 0, ineq: 1.28508e-07, eq: 5.85035e-07 }\n",
      "    IK: { time: 0.039798, evals: 50, done: 1, feasible: 1, sos: 0.0538499, f: 0, ineq: 1.28508e-07, eq: 5.85035e-07 }\n",
      "  -- feasible:\n",
      "     { time: 0.031683, evals: 29, done: 1, feasible: 1, sos: 2.36595, f: 0, ineq: 1.88558e-06, eq: 0.000937973 }\n",
      "  path: { time: 0.031683, evals: 29, done: 1, feasible: 1, sos: 2.36595, f: 0, ineq: 1.88558e-06, eq: 0.000937973 }\n",
      "=== 16 orientation y\n",
      "  -- feasible:\n",
      "     { time: 0.026743, evals: 31, done: 1, feasible: 1, sos: 0.014367, f: 0, ineq: 2.05129e-08, eq: 2.73346e-07 }\n",
      "    IK: { time: 0.026743, evals: 31, done: 1, feasible: 1, sos: 0.014367, f: 0, ineq: 2.05129e-08, eq: 2.73346e-07 }\n",
      "  -- feasible:\n",
      "     { time: 0.030742, evals: 27, done: 1, feasible: 1, sos: 1.1352, f: 0, ineq: 9.61648e-07, eq: 0.000120993 }\n",
      "  path: { time: 0.030742, evals: 27, done: 1, feasible: 1, sos: 1.1352, f: 0, ineq: 9.61648e-07, eq: 0.000120993 }\n",
      "=== 17 orientation y\n",
      "  -- feasible:\n",
      "     { time: 0.01001, evals: 14, done: 1, feasible: 1, sos: 0.014367, f: 0, ineq: 1.0301e-08, eq: 2.53279e-07 }\n",
      "    IK: { time: 0.01001, evals: 14, done: 1, feasible: 1, sos: 0.014367, f: 0, ineq: 1.0301e-08, eq: 2.53279e-07 }\n",
      "  -- feasible:\n",
      "     { time: 0.031781, evals: 26, done: 1, feasible: 1, sos: 0.414485, f: 0, ineq: 1.10286e-06, eq: 0.00269236 }\n",
      "  path: { time: 0.031781, evals: 26, done: 1, feasible: 1, sos: 0.414485, f: 0, ineq: 1.10286e-06, eq: 0.00269236 }\n",
      "=== 18 orientation x\n",
      "  -- feasible:\n",
      "     { time: 0.035351, evals: 38, done: 1, feasible: 1, sos: 0.0538499, f: 0, ineq: 1.27541e-07, eq: 5.81262e-07 }\n",
      "    IK: { time: 0.035351, evals: 38, done: 1, feasible: 1, sos: 0.0538499, f: 0, ineq: 1.27541e-07, eq: 5.81262e-07 }\n",
      "  -- feasible:\n",
      "     { time: 0.038677, evals: 36, done: 1, feasible: 1, sos: 1.16088, f: 0, ineq: 1.27404e-06, eq: 0.000721149 }\n",
      "  path: { time: 0.038677, evals: 36, done: 1, feasible: 1, sos: 1.16088, f: 0, ineq: 1.27404e-06, eq: 0.000721149 }\n",
      "=== 19 orientation x\n",
      "  -- feasible:\n",
      "     { time: 0.011897, evals: 8, done: 1, feasible: 1, sos: 0.0538499, f: 0, ineq: 2.14296e-07, eq: 8.27563e-07 }\n",
      "    IK: { time: 0.011897, evals: 8, done: 1, feasible: 1, sos: 0.0538499, f: 0, ineq: 2.14296e-07, eq: 8.27563e-07 }\n",
      "  -- feasible:\n",
      "     { time: 0.024309, evals: 17, done: 1, feasible: 1, sos: 0.433376, f: 0, ineq: 1.21016e-06, eq: 0.000525721 }\n",
      "  path: { time: 0.024309, evals: 17, done: 1, feasible: 1, sos: 0.433376, f: 0, ineq: 1.21016e-06, eq: 0.000525721 }\n"
     ]
    }
   ],
   "source": [
    "C.setJointState(qHome)\n",
    "limits = C.getJointLimits()\n",
    "verbose = 0\n",
    "\n",
    "for i in range(20):\n",
    "    qStart = C.getJointState()\n",
    "    \n",
    "    # choose a random grasp orientation\n",
    "    orientation = random.choice(['x', 'y', 'z'])\n",
    "    print('===', i, 'orientation', orientation)\n",
    "    \n",
    "    # setup the grasp problem\n",
    "    man = manip.ManipulationModelling(C)\n",
    "    man.setup_inverse_kinematics(accumulated_collisions=True)\n",
    "    man.grasp_box(1., gripper, box, palm, orientation)\n",
    "    \n",
    "    # solve\n",
    "    pose = man.solve()\n",
    "    print('    IK:', man.ret)\n",
    "    \n",
    "    # if feasible, display; otherwise try another grasp\n",
    "    if man.ret.feasible:\n",
    "        if verbose>0:\n",
    "            C.setJointState(pose[0])\n",
    "            C.view(True, f'grasp {i} with orientation {orientation}\\nret: {man.ret}')\n",
    "    else:\n",
    "        print('  -- infeasible')\n",
    "        C.setJointState(qStart)\n",
    "        continue\n",
    "\n",
    "    # setup the motion problem\n",
    "    man = manip.ManipulationModelling(C, helpers=[gripper])\n",
    "    man.setup_point_to_point_motion(qStart, pose[0])\n",
    "    man.retract([.0, .2], gripper)\n",
    "    man.approach([.8, 1.], gripper)\n",
    "    \n",
    "    # solve\n",
    "    path = man.solve()\n",
    "    print('  path:', man.ret)\n",
    "\n",
    "    # if feasible, display trivially (no real execution in BotOp here)\n",
    "    if man.ret.feasible:\n",
    "        for t in range(path.shape[0]):\n",
    "            C.setJointState(path[t])\n",
    "            C.view(False, f'grasp {i} with orientation {orientation}, path step {t}\\n{man.ret}')\n",
    "            time.sleep(.05)\n",
    "        C.view(verbose>0, f'path done')\n",
    "    else:\n",
    "        print('  -- infeasible')\n",
    "        \n",
    "del man"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bebd5d0e",
   "metadata": {},
   "source": [
    "## Integrated Example\n",
    "\n",
    "Let's start with an integrated example, where the robot endlessly loops through picking and placing a box on a table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8d6ad421",
   "metadata": {},
   "outputs": [],
   "source": [
    "import robotic as ry\n",
    "import manipulation as manip\n",
    "import numpy as np\n",
    "#from importlib import reload\n",
    "import time\n",
    "import random"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bebb1bf",
   "metadata": {},
   "source": [
    "We define a basic configuration with box on the table:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dc1db72a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C = ry.Config()\n",
    "C.addFile(ry.raiPath('../rai-robotModels/scenarios/pandaSingle.g'))\n",
    "\n",
    "C.addFrame(\"box\", \"table\") \\\n",
    "    .setJoint(ry.JT.rigid) \\\n",
    "    .setShape(ry.ST.ssBox, [.15,.06,.06,.005]) \\\n",
    "    .setRelativePosition([-.0,.3-.055,.095]) \\\n",
    "    .setContact(1) \\\n",
    "    .setMass(.1)\n",
    "\n",
    "C.addFrame(\"obstacle\", \"table\") \\\n",
    "    .setShape(ry.ST.ssBox, [.06,.15,.06,.005]) \\\n",
    "    .setColor([.1]) \\\n",
    "    .setRelativePosition([-.15,.3-.055,.095]) \\\n",
    "    .setContact(1)\n",
    "\n",
    "C.delFrame(\"panda_collCameraWrist\")\n",
    "\n",
    "# for convenience, a few definitions:\n",
    "qHome = C.getJointState()\n",
    "gripper = \"l_gripper\";\n",
    "palm = \"l_palm\";\n",
    "box = \"box\";\n",
    "table = \"table\";\n",
    "boxSize = C.frame(box).getSize()\n",
    "\n",
    "C.view()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63b89383",
   "metadata": {},
   "source": [
    "### endless box pick and place with random pick and place orientations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "34ec695e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== placement 0: grasp y place y\n",
      "  -- infeasible:placement 0: grasp y place y\n",
      "     { time: 0.212067, evals: 200, done: 1, feasible: 0, sos: 0.350986, f: 0, ineq: 0.185594, eq: 1.04161 }\n",
      "=== placement 1: grasp y place z\n",
      "  -- feasible:placement 1: grasp y place z\n",
      "     { time: 0.032608, evals: 41, done: 1, feasible: 1, sos: 0.0505104, f: 0, ineq: 7.2887e-07, eq: 1.43693e-05 }\n",
      "  -- feasible:sub_motion_0--placement 1: grasp y place z\n",
      "     { time: 0.036015, evals: 26, done: 1, feasible: 1, sos: 0.942083, f: 0, ineq: 5.83261e-07, eq: 7.39905e-05 }\n",
      "  -- feasible:sub_motion_1--placement 1: grasp y place z\n",
      "     { time: 0.011872, evals: 9, done: 1, feasible: 1, sos: 0.0404952, f: 0, ineq: 0.000347626, eq: 0.00290478 }\n",
      "=== placement 2: grasp y place x\n",
      "  -- feasible:placement 2: grasp y place x\n",
      "     { time: 0.066187, evals: 68, done: 1, feasible: 1, sos: 0.0986608, f: 0, ineq: 4.56237e-07, eq: 1.83077e-05 }\n",
      "  -- feasible:sub_motion_0--placement 2: grasp y place x\n",
      "     { time: 0.032183, evals: 25, done: 1, feasible: 1, sos: 0.353099, f: 0, ineq: 9.89443e-07, eq: 0.000190911 }\n",
      "  -- feasible:sub_motion_1--placement 2: grasp y place x\n",
      "     { time: 0.01634, evals: 14, done: 1, feasible: 1, sos: 0.512152, f: 0, ineq: 0.00100362, eq: 0.00388503 }\n",
      "=== placement 3: grasp z place yNeg\n",
      "  -- feasible:placement 3: grasp z place yNeg\n",
      "     { time: 0.140254, evals: 200, done: 1, feasible: 1, sos: 0.154013, f: 0, ineq: 0.000124363, eq: 0.0049735 }\n",
      "  -- feasible:sub_motion_0--placement 3: grasp z place yNeg\n",
      "     { time: 0.042581, evals: 35, done: 1, feasible: 1, sos: 2.37673, f: 0, ineq: 0, eq: 7.79521e-06 }\n",
      "  -- feasible:sub_motion_1--placement 3: grasp z place yNeg\n",
      "     { time: 0.034082, evals: 32, done: 1, feasible: 1, sos: 0.516618, f: 0, ineq: 0.00144766, eq: 0.00456615 }\n",
      "=== placement 4: grasp y place y\n",
      "  -- infeasible:placement 4: grasp y place y\n",
      "     { time: 0.162474, evals: 201, done: 1, feasible: 0, sos: 0.195132, f: 0, ineq: 0.259714, eq: 2.60202 }\n",
      "=== placement 5: grasp y place yNeg\n",
      "  -- infeasible:placement 5: grasp y place yNeg\n",
      "     { time: 0.133482, evals: 200, done: 1, feasible: 0, sos: 0.104987, f: 0, ineq: 0.275283, eq: 1.49013 }\n",
      "=== placement 6: grasp z place z\n",
      "  -- infeasible:placement 6: grasp z place z\n",
      "     { time: 0.129881, evals: 201, done: 1, feasible: 0, sos: 0.123963, f: 0, ineq: 0.201475, eq: 1.16039 }\n",
      "=== placement 7: grasp z place x\n",
      "  -- feasible:placement 7: grasp z place x\n",
      "     { time: 0.11787, evals: 184, done: 1, feasible: 1, sos: 0.0997678, f: 0, ineq: 0.000258062, eq: 0.000117248 }\n",
      "  -- feasible:sub_motion_0--placement 7: grasp z place x\n",
      "     { time: 0.03091, evals: 26, done: 1, feasible: 1, sos: 0.242291, f: 0, ineq: 7.04103e-07, eq: 0.0083233 }\n",
      "  -- feasible:sub_motion_1--placement 7: grasp z place x\n",
      "     { time: 0.032475, evals: 28, done: 1, feasible: 1, sos: 0.579269, f: 0, ineq: 0.000256523, eq: 0.00258088 }\n",
      "=== placement 8: grasp y place xNeg\n",
      "  -- infeasible:placement 8: grasp y place xNeg\n",
      "     { time: 0.048413, evals: 41, done: 1, feasible: 0, sos: 0.116279, f: 0, ineq: 8.23706e-07, eq: 1.00008 }\n",
      "=== placement 9: grasp z place yNeg\n",
      "  -- feasible:placement 9: grasp z place yNeg\n",
      "     { time: 0.053082, evals: 83, done: 1, feasible: 1, sos: 0.100116, f: 0, ineq: 4.02443e-07, eq: 2.24287e-05 }\n",
      "  -- feasible:sub_motion_0--placement 9: grasp z place yNeg\n",
      "     { time: 0.035247, evals: 29, done: 1, feasible: 1, sos: 1.37471, f: 0, ineq: 4.98376e-08, eq: 9.49836e-05 }\n",
      "  -- feasible:sub_motion_1--placement 9: grasp z place yNeg\n",
      "     { time: 0.028526, evals: 26, done: 1, feasible: 1, sos: 0.586621, f: 0, ineq: 0.000359215, eq: 0.00397249 }\n",
      "=== placement 10: grasp z place y\n",
      "  -- infeasible:placement 10: grasp z place y\n",
      "     { time: 0.054912, evals: 45, done: 1, feasible: 0, sos: 0.0490725, f: 0, ineq: 1.32018e-08, eq: 1.00007 }\n",
      "=== placement 11: grasp z place y\n",
      "  -- infeasible:placement 11: grasp z place y\n",
      "     { time: 0.014356, evals: 22, done: 1, feasible: 0, sos: 0.0490725, f: 0, ineq: 1.26272e-08, eq: 1.00006 }\n",
      "=== placement 12: grasp z place yNeg\n",
      "  -- feasible:placement 12: grasp z place yNeg\n",
      "     { time: 0.017135, evals: 27, done: 1, feasible: 1, sos: 0.0490715, f: 0, ineq: 2.59807e-09, eq: 7.41826e-07 }\n",
      "  -- feasible:sub_motion_0--placement 12: grasp z place yNeg\n",
      "     { time: 0.059322, evals: 51, done: 1, feasible: 1, sos: 0.650806, f: 0, ineq: 1.2769e-06, eq: 0.00024368 }\n",
      "  -- feasible:sub_motion_1--placement 12: grasp z place yNeg\n",
      "     { time: 0.010417, evals: 9, done: 1, feasible: 1, sos: 0.0119035, f: 0, ineq: 0.000363722, eq: 0.00359362 }\n",
      "=== placement 13: grasp z place zNeg\n",
      "  -- infeasible:placement 13: grasp z place zNeg\n",
      "     { time: 0.155885, evals: 201, done: 1, feasible: 0, sos: 0.162065, f: 0, ineq: 0.195988, eq: 1.12803 }\n",
      "=== placement 14: grasp z place y\n",
      "  -- infeasible:placement 14: grasp z place y\n",
      "     { time: 0.011248, evals: 18, done: 1, feasible: 0, sos: 0.0327768, f: 0, ineq: 2.84278e-07, eq: 1.00031 }\n",
      "=== placement 15: grasp z place y\n",
      "  -- infeasible:placement 15: grasp z place y\n",
      "     { time: 0.019438, evals: 31, done: 1, feasible: 0, sos: 0.0327768, f: 0, ineq: 2.80253e-07, eq: 1.00031 }\n",
      "=== placement 16: grasp y place zNeg\n",
      "  -- infeasible:placement 16: grasp y place zNeg\n",
      "     { time: 0.07938, evals: 120, done: 1, feasible: 0, sos: 0.142319, f: 0, ineq: 0.230479, eq: 1.08024 }\n",
      "=== placement 17: grasp y place y\n",
      "  -- infeasible:placement 17: grasp y place y\n",
      "     { time: 0.134412, evals: 201, done: 1, feasible: 0, sos: 0.0899857, f: 0, ineq: 0.267871, eq: 2.48815 }\n",
      "=== placement 18: grasp y place xNeg\n",
      "  -- infeasible:placement 18: grasp y place xNeg\n",
      "     { time: 0.136014, evals: 194, done: 1, feasible: 0, sos: 0.361577, f: 0, ineq: 0.235429, eq: 1.11175 }\n",
      "=== placement 19: grasp z place yNeg\n",
      "  -- feasible:placement 19: grasp z place yNeg\n",
      "     { time: 0.00909, evals: 14, done: 1, feasible: 1, sos: 0.0327731, f: 0, ineq: 2.74519e-07, eq: 1.43911e-05 }\n",
      "  -- feasible:sub_motion_0--placement 19: grasp z place yNeg\n",
      "     { time: 0.036568, evals: 30, done: 1, feasible: 1, sos: 0.324944, f: 0, ineq: 9.37457e-07, eq: 0.000198425 }\n",
      "  -- feasible:sub_motion_1--placement 19: grasp z place yNeg\n",
      "     { time: 0.016312, evals: 14, done: 1, feasible: 1, sos: 0.00549752, f: 0, ineq: 0.000375407, eq: 0.00320204 }\n"
     ]
    }
   ],
   "source": [
    "#reload(manip)\n",
    "\n",
    "C.setJointState(qHome)\n",
    "C.view_raise()\n",
    "\n",
    "for l in range(20):\n",
    "        qStart = C.getJointState()\n",
    "\n",
    "        graspDirection = random.choice(['y', 'z']) #'x' not possible: box too large\n",
    "        placeDirection = random.choice(['x', 'y', 'z', 'xNeg', 'yNeg', 'zNeg'])\n",
    "        info = f'placement {l}: grasp {graspDirection} place {placeDirection}'\n",
    "        print('===', info)\n",
    "\n",
    "        M = manip.ManipulationModelling(C, info, helpers=[gripper])\n",
    "        M.setup_pick_and_place_waypoints(gripper, box, homing_scale=1e-1)\n",
    "        M.grasp_box(1., gripper, box, palm, graspDirection)\n",
    "        M.place_box(2., box, table, palm, placeDirection)\n",
    "        M.no_collision([], palm, table)\n",
    "        M.target_relative_xy_position(2., box, table, [.2, .3])\n",
    "        ways = M.solve()\n",
    "\n",
    "        if not M.feasible:\n",
    "            continue\n",
    "\n",
    "        M2 = M.sub_motion(0)\n",
    "        # M = manip.ManipulationModelling(C, info, helpers=[gripper])\n",
    "        # M.setup_point_to_point_motion(qStart, ways[0])\n",
    "        M2.no_collision([.3,.7], palm, box, margin=.05)\n",
    "        M2.retract([.0, .2], gripper)\n",
    "        M2.approach([.8, 1.], gripper)\n",
    "        M2.solve()\n",
    "        if not M2.feasible:\n",
    "            continue\n",
    "\n",
    "        M3 = M.sub_motion(1)\n",
    "        #manip.ManipulationModelling(C, info)\n",
    "        # M.setup_point_to_point_motion(ways[0], ways[1])\n",
    "        M3.no_collision([], table, box)\n",
    "        M3.solve()\n",
    "        if not M3.ret.feasible:\n",
    "            continue\n",
    "\n",
    "        M2.play(C)\n",
    "        C.attach(gripper, box)\n",
    "        M3.play(C)\n",
    "        C.attach(table, box)\n",
    "\n",
    "del M"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f08fc42",
   "metadata": {},
   "source": [
    "### box top grasps and place over obstacle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fb96e54c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== placement 0: grasp yz place z place_pos [-0.3, 0.2] place_ori [0, 1, 0.0]\n",
      "  -- feasible:\n",
      "     { time: 0.008642, evals: 17, done: 1, feasible: 1, sos: 0.0717996, f: 0, ineq: 0, eq: 2.66161e-05 }\n",
      "  -- feasible:sub_motion_0--\n",
      "     { time: 0.034304, evals: 33, done: 1, feasible: 1, sos: 0.990973, f: 0, ineq: 5.8387e-07, eq: 6.16109e-05 }\n",
      "  -- feasible:sub_motion_1--\n",
      "     { time: 0.033855, evals: 13, done: 1, feasible: 1, sos: 1.49209, f: 0, ineq: 0.000491425, eq: 0.00364284 }\n",
      "=== placement 1: grasp yz place z place_pos [0.0, 0.2] place_ori [-1, 0, 0.0]\n",
      "  -- feasible:\n",
      "     { time: 0.105763, evals: 201, done: 1, feasible: 1, sos: 0.239968, f: 0, ineq: 0, eq: 0.131209 }\n",
      "  -- feasible:sub_motion_0--\n",
      "     { time: 0.028848, evals: 29, done: 1, feasible: 1, sos: 0.963525, f: 0, ineq: 2.54066e-06, eq: 0.000452589 }\n",
      "  -- feasible:sub_motion_1--\n",
      "     { time: 0.048562, evals: 36, done: 1, feasible: 1, sos: 5.71269, f: 0, ineq: 0.00208474, eq: 0.00855051 }\n",
      "=== placement 2: grasp yz place z place_pos [0.3, 0.2] place_ori [0, 1, 0.0]\n",
      "  -- feasible:\n",
      "     { time: 0.124475, evals: 200, done: 1, feasible: 1, sos: 0.240618, f: 0, ineq: 0, eq: 0.104012 }\n",
      "  -- feasible:sub_motion_0--\n",
      "     { time: 0.030777, evals: 31, done: 1, feasible: 1, sos: 0.871076, f: 0, ineq: 2.41649e-06, eq: 0.000926135 }\n",
      "  -- feasible:sub_motion_1--\n",
      "     { time: 0.022633, evals: 16, done: 1, feasible: 1, sos: 7.30571, f: 0, ineq: 0.000737853, eq: 0.00386883 }\n",
      "=== placement 3: grasp yz place z place_pos [-0.3, 0.2] place_ori [-1, 0, 0.0]\n",
      "  -- feasible:\n",
      "     { time: 0.031758, evals: 19, done: 1, feasible: 1, sos: 0.170394, f: 0, ineq: 0, eq: 6.5457e-05 }\n",
      "  -- feasible:sub_motion_0--\n",
      "     { time: 0.028656, evals: 27, done: 1, feasible: 1, sos: 0.774006, f: 0, ineq: 1.78316e-06, eq: 0.000641499 }\n",
      "  -- feasible:sub_motion_1--\n",
      "     { time: 0.045344, evals: 34, done: 1, feasible: 1, sos: 5.13056, f: 0, ineq: 0.00104632, eq: 0.00483515 }\n",
      "=== placement 4: grasp yz place z place_pos [0.0, 0.2] place_ori [0, 1, 0.0]\n",
      "  -- feasible:\n",
      "     { time: 0.024558, evals: 14, done: 1, feasible: 1, sos: 0.135764, f: 0, ineq: 0, eq: 1.86066e-06 }\n",
      "  -- feasible:sub_motion_0--\n",
      "     { time: 0.02503, evals: 22, done: 1, feasible: 1, sos: 0.77122, f: 0, ineq: 1.94446e-06, eq: 0.000831377 }\n",
      "  -- feasible:sub_motion_1--\n",
      "     { time: 0.016805, evals: 11, done: 1, feasible: 1, sos: 4.0266, f: 0, ineq: 0.000845229, eq: 0.00456566 }\n",
      "=== placement 5: grasp yz place z place_pos [0.3, 0.2] place_ori [-1, 0, 0.0]\n",
      "  -- infeasible:\n",
      "     { time: 0.064346, evals: 72, done: 1, feasible: 0, sos: 0.21851, f: 0, ineq: 0, eq: 0.878197 }\n",
      "=== placement 6: grasp yz place z place_pos [-0.3, 0.2] place_ori [0, 1, 0.0]\n",
      "  -- feasible:\n",
      "     { time: 0.007393, evals: 14, done: 1, feasible: 1, sos: 0.0852678, f: 0, ineq: 0, eq: 9.47146e-07 }\n",
      "  -- feasible:sub_motion_0--\n",
      "     { time: 0.025327, evals: 25, done: 1, feasible: 1, sos: 2.09041, f: 0, ineq: 5.50176e-06, eq: 0.000248256 }\n",
      "  -- feasible:sub_motion_1--\n",
      "     { time: 0.019136, evals: 13, done: 1, feasible: 1, sos: 2.42507, f: 0, ineq: 0.000495312, eq: 0.00367291 }\n"
     ]
    }
   ],
   "source": [
    "#reload(manip)\n",
    "\n",
    "C.setJointState(qHome)\n",
    "C.view_raise()\n",
    "\n",
    "C.frame(box).setRelativePosition([-.0,.3-.055,.095])\n",
    "C.frame(box).setRelativeQuaternion([1.,0,0,0])\n",
    "\n",
    "for i in range(7):\n",
    "        qStart = C.getJointState()\n",
    "\n",
    "        graspDirection = 'yz' #random.choice(['xz', 'yz'])\n",
    "        placeDirection = 'z'\n",
    "        place_position = [(i%3)*.3-.3, .2]\n",
    "        place_orientation = [-(i%2),((i+1)%2),0.]\n",
    "        info = f'placement {i}: grasp {graspDirection} place {placeDirection} place_pos {place_position} place_ori {place_orientation}'\n",
    "        print('===', info)\n",
    "\n",
    "        M = manip.ManipulationModelling(C, helpers=[gripper])\n",
    "        M.setup_pick_and_place_waypoints(gripper, box, homing_scale=1e-1, joint_limits=False)\n",
    "        M.grasp_top_box(1., gripper, box, graspDirection)\n",
    "        M.place_box(2., box, table, palm, placeDirection)\n",
    "        M.target_relative_xy_position(2., box, table, place_position)\n",
    "        M.target_x_orientation(2., box, place_orientation)\n",
    "        M.solve()\n",
    "        if not M.feasible:\n",
    "                continue\n",
    "\n",
    "        M2 = M.sub_motion(0)\n",
    "        M2.retract([.0, .2], gripper)\n",
    "        M2.approach([.8, 1.], gripper)\n",
    "        M2.solve()\n",
    "        if not M2.ret.feasible:\n",
    "            continue\n",
    "\n",
    "        M3 = M.sub_motion(1)\n",
    "#         M3.retract([.0, .2], box, distance=.05)\n",
    "#         M3.approach([.8, 1.], box, distance=.05)\n",
    "        M3.no_collision([], table, box)\n",
    "        M3.no_collision([], box, 'obstacle')\n",
    "        M3.bias(.5, qHome, 1e0)\n",
    "        M3.solve()\n",
    "        if not M3.ret.feasible:\n",
    "            continue\n",
    "            \n",
    "        M2.play(C)\n",
    "        C.attach(gripper, box)\n",
    "        M3.play(C)\n",
    "        C.attach(table, box)\n",
    "\n",
    "del M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "70f07626",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== push 0\n",
      "  -- feasible:push 0\n",
      "     { time: 0.07724, evals: 141, done: 1, feasible: 1, sos: 0.141691, f: 0, ineq: 0, eq: 0.0795577 }\n",
      "  -- feasible:sub_motion_0--push 0\n",
      "     { time: 0.088636, evals: 44, done: 1, feasible: 1, sos: 0.352562, f: 0, ineq: 0.00118148, eq: 0.000605182 }\n",
      "  -- feasible:sub_motion_1--push 0\n",
      "     { time: 0.014978, evals: 11, done: 1, feasible: 1, sos: 0.0632206, f: 0, ineq: 0, eq: 0.00203542 }\n",
      "=== push 1\n",
      "  -- infeasible:push 1\n",
      "     { time: 0.084641, evals: 101, done: 1, feasible: 0, sos: 0.44118, f: 0, ineq: 0, eq: 2.75617 }\n",
      "=== push 2\n",
      "  -- infeasible:push 2\n",
      "     { time: 0.114205, evals: 189, done: 1, feasible: 0, sos: 0.172812, f: 0, ineq: 0.0414607, eq: 1.52495 }\n",
      "=== push 3\n",
      "  -- feasible:push 3\n",
      "     { time: 0.061019, evals: 106, done: 1, feasible: 1, sos: 0.162031, f: 0, ineq: 0, eq: 0.0211987 }\n",
      "  -- feasible:sub_motion_0--push 3\n",
      "     { time: 0.098349, evals: 46, done: 1, feasible: 1, sos: 0.321136, f: 0, ineq: 2.22168e-07, eq: 0.000113267 }\n",
      "  -- feasible:sub_motion_1--push 3\n",
      "     { time: 0.014267, evals: 11, done: 1, feasible: 1, sos: 0.042872, f: 0, ineq: 0, eq: 0.0025362 }\n",
      "=== push 4\n",
      "  -- infeasible:push 4\n",
      "     { time: 0.140427, evals: 177, done: 1, feasible: 0, sos: 0.480995, f: 0, ineq: 0.292599, eq: 3.19722 }\n",
      "=== push 5\n",
      "  -- infeasible:push 5\n",
      "     { time: 0.120783, evals: 200, done: 1, feasible: 0, sos: 0.282978, f: 0, ineq: 0, eq: 0.988734 }\n",
      "=== push 6\n",
      "  -- infeasible:push 6\n",
      "     { time: 0.072285, evals: 107, done: 1, feasible: 0, sos: 0.460156, f: 0, ineq: 0.122158, eq: 2.69191 }\n",
      "=== push 7\n",
      "  -- infeasible:push 7\n",
      "     { time: 0.086248, evals: 122, done: 1, feasible: 0, sos: 0.481323, f: 0, ineq: 0.512065, eq: 5.97502 }\n",
      "=== push 8\n",
      "  -- infeasible:push 8\n",
      "     { time: 0.122871, evals: 200, done: 1, feasible: 0, sos: 0.269598, f: 0, ineq: 0.043786, eq: 2.2749 }\n",
      "=== push 9\n",
      "  -- feasible:push 9\n",
      "     { time: 0.115918, evals: 176, done: 1, feasible: 1, sos: 0.399868, f: 0, ineq: 0, eq: 0.220444 }\n",
      "  -- feasible:sub_motion_0--push 9\n",
      "     { time: 0.41567, evals: 201, done: 1, feasible: 1, sos: 2.40617, f: 0, ineq: 0.000606109, eq: 0.000167363 }\n",
      "  -- feasible:sub_motion_1--push 9\n",
      "     { time: 0.024607, evals: 18, done: 1, feasible: 1, sos: 0.170684, f: 0, ineq: 0, eq: 0.016679 }\n",
      "=== push 10\n",
      "  -- infeasible:push 10\n",
      "     { time: 0.11536, evals: 147, done: 1, feasible: 0, sos: 0.331183, f: 0, ineq: 0.00869625, eq: 0.639472 }\n",
      "=== push 11\n",
      "  -- infeasible:push 11\n",
      "     { time: 0.030195, evals: 47, done: 1, feasible: 0, sos: 0.33079, f: 0, ineq: 0.0695156, eq: 3.49164 }\n",
      "=== push 12\n",
      "  -- feasible:push 12\n",
      "     { time: 0.058976, evals: 103, done: 1, feasible: 1, sos: 0.310019, f: 0, ineq: 0.0011924, eq: 0.0392362 }\n",
      "  -- feasible:sub_motion_0--push 12\n",
      "     { time: 0.200194, evals: 95, done: 1, feasible: 1, sos: 0.675696, f: 0, ineq: 1.4337e-05, eq: 2.06975e-05 }\n",
      "  -- feasible:sub_motion_1--push 12\n",
      "     { time: 0.019223, evals: 14, done: 1, feasible: 1, sos: 0.0857699, f: 0, ineq: 0, eq: 0.00284855 }\n",
      "=== push 13\n",
      "  -- infeasible:push 13\n",
      "     { time: 0.065641, evals: 67, done: 1, feasible: 0, sos: 0.315901, f: 0, ineq: 0.128065, eq: 5.51326 }\n",
      "=== push 14\n",
      "  -- infeasible:push 14\n",
      "     { time: 0.040601, evals: 69, done: 1, feasible: 0, sos: 0.315267, f: 0, ineq: 0.0720246, eq: 5.27258 }\n",
      "=== push 15\n",
      "  -- infeasible:push 15\n",
      "     { time: 0.036186, evals: 59, done: 1, feasible: 0, sos: 0.31625, f: 0, ineq: 0.329304, eq: 6.37773 }\n",
      "=== push 16\n",
      "  -- infeasible:push 16\n",
      "     { time: 0.033632, evals: 58, done: 1, feasible: 0, sos: 0.316135, f: 0, ineq: 0.122155, eq: 3.86684 }\n",
      "=== push 17\n",
      "  -- infeasible:push 17\n",
      "     { time: 0.038653, evals: 64, done: 1, feasible: 0, sos: 0.316236, f: 0, ineq: 0.348532, eq: 6.74681 }\n",
      "=== push 18\n",
      "  -- infeasible:push 18\n",
      "     { time: 0.111384, evals: 201, done: 1, feasible: 0, sos: 0.279089, f: 0, ineq: 0.0272261, eq: 1.77735 }\n",
      "=== push 19\n",
      "  -- infeasible:push 19\n",
      "     { time: 0.032325, evals: 52, done: 1, feasible: 0, sos: 0.317581, f: 0, ineq: 0.220873, eq: 7.19596 }\n",
      "=== push 20\n",
      "  -- infeasible:push 20\n",
      "     { time: 0.02458, evals: 41, done: 1, feasible: 0, sos: 0.316823, f: 0, ineq: 0.0925929, eq: 2.41734 }\n",
      "=== push 21\n",
      "  -- infeasible:push 21\n",
      "     { time: 0.029691, evals: 48, done: 1, feasible: 0, sos: 0.316583, f: 0, ineq: 0.193647, eq: 3.84817 }\n",
      "=== push 22\n",
      "  -- infeasible:push 22\n",
      "     { time: 0.029875, evals: 47, done: 1, feasible: 0, sos: 0.318563, f: 0, ineq: 0.327651, eq: 8.28805 }\n",
      "=== push 23\n",
      "  -- infeasible:push 23\n",
      "     { time: 0.020277, evals: 34, done: 1, feasible: 0, sos: 0.316228, f: 0, ineq: 0.0819283, eq: 3.4616 }\n",
      "=== push 24\n",
      "  -- infeasible:push 24\n",
      "     { time: 0.028852, evals: 47, done: 1, feasible: 0, sos: 0.316944, f: 0, ineq: 0.311954, eq: 6.85294 }\n",
      "=== push 25\n",
      "  -- infeasible:push 25\n",
      "     { time: 0.028852, evals: 48, done: 1, feasible: 0, sos: 0.316427, f: 0, ineq: 0.14373, eq: 3.51041 }\n",
      "=== push 26\n",
      "  -- infeasible:push 26\n",
      "     { time: 0.057033, evals: 87, done: 1, feasible: 0, sos: 0.318943, f: 0, ineq: 0.366022, eq: 8.76564 }\n",
      "=== push 27\n",
      "  -- infeasible:push 27\n",
      "     { time: 0.027191, evals: 44, done: 1, feasible: 0, sos: 0.316461, f: 0, ineq: 0.230192, eq: 4.30655 }\n",
      "=== push 28\n",
      "  -- infeasible:push 28\n",
      "     { time: 0.03176, evals: 51, done: 1, feasible: 0, sos: 0.316376, f: 0, ineq: 0.292742, eq: 5.81919 }\n",
      "=== push 29\n",
      "  -- infeasible:push 29\n",
      "     { time: 0.023448, evals: 37, done: 1, feasible: 0, sos: 0.316559, f: 0, ineq: 0.179104, eq: 3.79793 }\n",
      "=== push 30\n",
      "  -- infeasible:push 30\n",
      "     { time: 0.029305, evals: 46, done: 1, feasible: 0, sos: 0.31647, f: 0, ineq: 0.202056, eq: 4.81298 }\n",
      "=== push 31\n",
      "  -- infeasible:push 31\n",
      "     { time: 0.027636, evals: 47, done: 1, feasible: 0, sos: 0.316303, f: 0, ineq: 0.0705508, eq: 3.38054 }\n",
      "=== push 32\n",
      "  -- infeasible:push 32\n",
      "     { time: 0.020537, evals: 35, done: 1, feasible: 0, sos: 0.317789, f: 0, ineq: 0.0386891, eq: 1.68999 }\n",
      "=== push 33\n",
      "  -- infeasible:push 33\n",
      "     { time: 0.118289, evals: 200, done: 1, feasible: 0, sos: 0.318943, f: 0, ineq: 0.159222, eq: 5.70805 }\n",
      "=== push 34\n",
      "  -- infeasible:push 34\n",
      "     { time: 0.06312, evals: 100, done: 1, feasible: 0, sos: 0.318313, f: 0, ineq: 0.394261, eq: 8.68489 }\n",
      "=== push 35\n",
      "  -- infeasible:push 35\n",
      "     { time: 0.116933, evals: 201, done: 1, feasible: 0, sos: 0.287782, f: 0, ineq: 0.0853894, eq: 7.24849 }\n",
      "=== push 36\n",
      "  -- infeasible:push 36\n",
      "     { time: 0.050731, evals: 84, done: 1, feasible: 0, sos: 0.316496, f: 0, ineq: 0.212457, eq: 4.24908 }\n",
      "=== push 37\n",
      "  -- infeasible:push 37\n",
      "     { time: 0.031199, evals: 51, done: 1, feasible: 0, sos: 0.316415, f: 0, ineq: 0.27013, eq: 5.44562 }\n",
      "=== push 38\n",
      "  -- infeasible:push 38\n",
      "     { time: 0.041588, evals: 71, done: 1, feasible: 0, sos: 0.31561, f: 0, ineq: 0.108825, eq: 5.44003 }\n",
      "=== push 39\n",
      "  -- infeasible:push 39\n",
      "     { time: 0.021756, evals: 36, done: 1, feasible: 0, sos: 0.316319, f: 0, ineq: 0.169187, eq: 4.78929 }\n",
      "=== push 40\n",
      "  -- infeasible:push 40\n",
      "     { time: 0.03067, evals: 51, done: 1, feasible: 0, sos: 0.316357, f: 0, ineq: 0.256871, eq: 4.90551 }\n",
      "=== push 41\n",
      "  -- infeasible:push 41\n",
      "     { time: 0.120263, evals: 201, done: 1, feasible: 0, sos: 0.320075, f: 0, ineq: 0.390989, eq: 7.93905 }\n",
      "=== push 42\n",
      "  -- infeasible:push 42\n",
      "     { time: 0.022106, evals: 38, done: 1, feasible: 0, sos: 0.3165, f: 0, ineq: 0.0998889, eq: 2.92057 }\n",
      "=== push 43\n",
      "  -- infeasible:push 43\n",
      "     { time: 0.057157, evals: 89, done: 1, feasible: 0, sos: 0.319472, f: 0, ineq: 0.365422, eq: 9.00842 }\n",
      "=== push 44\n",
      "  -- infeasible:push 44\n",
      "     { time: 0.029104, evals: 47, done: 1, feasible: 0, sos: 0.316502, f: 0, ineq: 0.255322, eq: 5.40527 }\n",
      "=== push 45\n",
      "  -- infeasible:push 45\n",
      "     { time: 0.034179, evals: 54, done: 1, feasible: 0, sos: 0.316864, f: 0, ineq: 0.331323, eq: 7.04332 }\n",
      "=== push 46\n",
      "  -- infeasible:push 46\n",
      "     { time: 0.034751, evals: 58, done: 1, feasible: 0, sos: 0.316437, f: 0, ineq: 0.188847, eq: 4.51698 }\n",
      "=== push 47\n",
      "  -- infeasible:push 47\n",
      "     { time: 0.025008, evals: 42, done: 1, feasible: 0, sos: 0.316555, f: 0, ineq: 0.102268, eq: 2.834 }\n",
      "=== push 48\n",
      "  -- infeasible:push 48\n",
      "     { time: 0.063306, evals: 109, done: 1, feasible: 0, sos: 0.31825, f: 0, ineq: 0.128563, eq: 4.38583 }\n",
      "=== push 49\n",
      "  -- infeasible:push 49\n",
      "     { time: 0.033473, evals: 57, done: 1, feasible: 0, sos: 0.317228, f: 0, ineq: 0.0818242, eq: 1.9004 }\n"
     ]
    }
   ],
   "source": [
    "#reload(manip)\n",
    "\n",
    "C.frame(\"l_panda_finger_joint1\").setJointState(np.array([.0]))\n",
    "\n",
    "obj = box\n",
    "C.frame(obj).setRelativePosition([-.0,.3-.055,.095])\n",
    "C.frame(obj).setRelativeQuaternion([1.,0,0,0])\n",
    "\n",
    "for i in range(50):\n",
    "     qStart = C.getJointState()\n",
    "\n",
    "     info = f'push {i}'\n",
    "     print('===', info)\n",
    "\n",
    "     M = manip.ManipulationModelling(C, info, ['l_gripper'])\n",
    "     M.setup_pick_and_place_waypoints(gripper, obj, 1e-1)\n",
    "     M.straight_push([1.,2.], obj, gripper, table)\n",
    "     #random target position\n",
    "     M.komo.addObjective([2.], ry.FS.position, [obj], ry.OT.eq, 1e1*np.array([[1,0,0],[0,1,0]]), .4*np.random.rand(3) - .2+np.array([.0,.3,.0]))\n",
    "     M.solve()\n",
    "     if not M.ret.feasible:\n",
    "          continue\n",
    "\n",
    "     M1 = M.sub_motion(0)\n",
    "     M1.retractPush([.0, .15], gripper, .03)\n",
    "     M1.approachPush([.85, 1.], gripper, .03)\n",
    "     M1.no_collision([.15,.85], obj, \"l_finger1\", .02)\n",
    "     M1.no_collision([.15,.85], obj, \"l_finger2\", .02)\n",
    "     M1.no_collision([.15,.85], obj, 'l_palm', .02)\n",
    "     M1.no_collision([], table, \"l_finger1\", .0)\n",
    "     M1.no_collision([], table, \"l_finger2\", .0)\n",
    "     M1.solve()\n",
    "     if not M1.ret.feasible:\n",
    "          continue\n",
    "\n",
    "     M2 = M.sub_motion(1)\n",
    "     M2.komo.addObjective([], ry.FS.positionRel, [gripper, '_push_start'], ry.OT.eq, 1e1*np.array([[1,0,0],[0,0,1]]))\n",
    "     M2.solve()\n",
    "     if not M2.ret.feasible:\n",
    "          continue\n",
    "\n",
    "     M1.play(C, 1.)\n",
    "     C.attach(gripper, obj)\n",
    "     M2.play(C, 1.)\n",
    "     C.attach(table, obj)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "064ecdbc",
   "metadata": {},
   "source": [
    "## TODOS:\n",
    "* Proper execution: BotOp instead of display with C\n",
    "* RRTs\n",
    "* additional planar motion constraint for in-plane manipulation\n",
    "* more typical manipulation constraints: camera_look_at, push_straight, "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "06e94d97",
   "metadata": {},
   "outputs": [],
   "source": [
    "del C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f67eeb3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
